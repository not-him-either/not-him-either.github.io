<!DOCTYPE html>
<html lang="en">
<head>
  <meta charset="UTF-8">
  <meta name="viewport" content="width=device-width, initial-scale=1">
  <title>For My Dearest Princess</title>
  <!-- Google Analytics placeholder (if needed) -->
  <!-- <script async src="https://www.googletagmanager.com/gtag/js?id=YOUR_ID_HERE"></script>
  <script>
    window.dataLayer = window.dataLayer || [];
    function gtag(){dataLayer.push(arguments);}
    gtag('js', new Date());
    gtag('config', 'YOUR_ID_HERE');
  </script> -->
  <link rel="stylesheet" href="style.css">
</head>
<body>
  <!-- Countdown Timer -->
  <div id="countdown"></div>
  
  <!-- Background Music with Controls -->
  <audio id="bg-music" controls autoplay loop style="position: fixed; bottom: 20px; left: 20px; z-index:1000; opacity:0.8;">
    <source src="assets/audio/song-bg.mp3" type="audio/mpeg">
    Your browser does not support the audio element.
  </audio>
  
  <!-- Lyrics Display (Fixed at Top) -->
  <div id="lyrics-display">♪ Your lyrics will appear here ♪</div>
  
  <!-- Hero Section with Parallax Effect -->
  <header>
    <div>
      <h1>For My Dearest Princess</h1>
      <p>A journey of whispered memories and dreams...</p>
      <a href="#cta" style="position: relative; z-index: 2;">Scroll for a surprise</a>
    </div>
  </header>
  
  <!-- Photo Carousel Section -->
  <section class="carousel">
    <div class="slides">
      <!-- Replace with your actual image URLs -->
      <img src="assets/images/photo1.jpeg" alt="Princess Photo 1">
      <img src="art_piece.jpg" alt="Art Piece of Princess">
      <img src="assets/images/photo2.jpeg" alt="Princess Photo 2">
    </div>
    <div class="carousel-buttons">
      <button id="prevBtn">&#10094;</button>
      <button id="nextBtn">&#10095;</button>
    </div>
  </section>
  
  <!-- Hidden Poem / Love Letter Section -->
  <section class="hidden-poem">
    <button id="reveal-poem">Reveal Our Secret Poem</button>
    <div class="poem-content" id="poem-content">
      <p>
        Under the soft glow of that enchanted night,<br>
        When our lips met in tender, whispered light,<br>
        I traced destiny in your eyes so true,<br>
        And in that silent moment, I knew my world was you.
      </p>
      <button id="reveal-extra" style="margin-top:10px; background:#f39c12; padding:5px 15px; border:none; border-radius:5px; color:#fff;">More</button>
      <div class="extra-poem" id="extra-poem">
        <p>
          As the night deepened and stars aligned,<br>
          Each heartbeat wrote a verse, uniquely designed.<br>
          Our souls entwined in that mystical hue—<br>
          A promise eternal, forever me and you.
        </p>
      </div>
    </div>
  </section>
  
  <!-- Interactive Map Placeholder Section -->
  <section class="interactive-map" id="interactive-map">
    <p>Click here to explore the places where our story began...</p>
  </section>
  
  <!-- Call-to-Action Section -->
  <section class="cta" id="cta">
    <h2>Will you be my Valentine?</h2>
    <button class="yes-btn" id="yesBtn">Yes</button>
    <button class="no-btn" id="noBtn">No</button>
    <div id="ctaResponse"></div>
    <!-- Placeholder link for further details -->
    <div id="moreInfo"></div>
  </section>
  
  <!-- Footer -->
  <footer>
    Crafted with love &hearts; | &copy; 2025
  </footer>
  
  <!-- Confetti (using canvas-confetti from CDN) -->
  <script src="https://cdn.jsdelivr.net/npm/canvas-confetti@1.6.0/dist/confetti.browser.min.js"></script>
  
  <script src="main.js"></script>
</body>
</html>
/***************************************************/
/* Reset & Basic Styles */
* { margin: 0; padding: 0; box-sizing: border-box; }
body {
  font-family: 'Georgia', serif;
  background: #f8f8f8;
  color: #333;
  line-height: 1.6;
  overflow-x: hidden;
  scroll-behavior: smooth;
}
a { text-decoration: none; }

/* Parallax Hero Section */
header {
  position: relative;
  height: 100vh;
  background: url('your-hero-background.jpg') center/cover no-repeat fixed;
  display: flex;
  flex-direction: column;
  justify-content: center;
  align-items: center;
  text-align: center;
  padding: 20px;
}
header::after {
  content: "";
  position: absolute;
  top: 0; left: 0;
  width: 100%; height: 100%;
  background: rgba(0, 0, 0, 0.7); /* Increased darkness for better contrast */
}
header h1 {
  position: relative;
  color: #fff;
  font-size: 3em;
  margin-bottom: 10px;
  transition: transform 0.3s;
}
header p {
  position: relative;
  color: #fff;
  font-size: 1.2em;
  transition: opacity 0.3s;
}
header a {
  position: relative;
  z-index: 2;
  color: #fff;
  font-size: 1.1em;
  border-bottom: 1px solid #fff;
  padding-bottom: 3px;
  transition: color 0.3s;
}
header a:hover { color: #f1c40f; }

header h1, header p {
  text-shadow: 2px 2px 6px rgba(0, 0, 0, 0.7);
}

/* Lyrics Display - Fixed and visible even on scroll */
#lyrics-display {
  position: fixed;
  top: 80px;
  left: 50%;
  transform: translateX(-50%);
  background: rgba(0,0,0,0.7);
  color: #fff;
  padding: 8px 16px;
  border-radius: 20px;
  font-size: 1.1em;
  z-index: 1100;
  pointer-events: none;
  white-space: pre-wrap;
  max-height: 200px;
  overflow-y: auto;
}
/* Highlight class for the current word */
.highlight {
  color: #f1c40f;
  font-weight: bold;
}

/* Countdown Timer */
#countdown {
  position: fixed;
  top: 20px;
  right: 20px;
  background: rgba(255,255,255,0.9);
  padding: 10px 15px;
  border-radius: 8px;
  font-size: 1.2em;
  font-weight: bold;
  z-index: 1000;
}

/* Photo Carousel */
.carousel {
  position: relative;
  max-width: 800px;
  margin: 40px auto;
  overflow: hidden;
  border-radius: 10px;
  box-shadow: 0 4px 6px rgba(0,0,0,0.1);
}
.slides {
  display: flex;
  transition: transform 0.8s ease-in-out;
}
.slides img {
  width: 100%;
  flex-shrink: 0;
  object-fit: cover;
  height: auto;
}
.carousel-buttons {
  position: absolute;
  top: 50%;
  width: 100%;
  display: flex;
  justify-content: space-between;
  transform: translateY(-50%);
}
.carousel-buttons button {
  background: rgba(0,0,0,0.5);
  border: none;
  color: #fff;
  padding: 10px 15px;
  cursor: pointer;
  transition: background 0.3s;
}
.carousel-buttons button:hover { background: rgba(0,0,0,0.7); }

/* Hidden Poem Section */
.hidden-poem {
  text-align: center;
  margin: 40px 20px;
  transition: all 0.5s ease;
}
.hidden-poem button {
  padding: 10px 20px;
  background: #e74c3c;
  color: #fff;
  border: none;
  border-radius: 5px;
  font-size: 1em;
  cursor: pointer;
  transition: background 0.3s;
}
.hidden-poem button:hover { background: #c0392b; }
.poem-content {
  display: none;
  margin-top: 20px;
  font-size: 1.2em;
  font-style: italic;
  color: #555;
  line-height: 1.5;
}
.extra-poem {
  display: none;
  margin-top: 15px;
  font-size: 1em;
  color: #777;
}

/* Interactive Map Placeholder */
.interactive-map {
  text-align: center;
  margin: 40px 20px;
  padding: 40px;
  background: #fff;
  border-radius: 10px;
  box-shadow: 0 4px 6px rgba(0,0,0,0.1);
  cursor: pointer;
  transition: background 0.3s;
}
.interactive-map:hover { background: #f1f1f1; }
.interactive-map p { font-size: 1.1em; }

/* Call-to-Action Section */
.cta {
  text-align: center;
  margin: 40px 20px;
  padding: 20px;
  background: #fff;
  border-radius: 10px;
  box-shadow: 0 4px 6px rgba(0,0,0,0.1);
  transition: transform 0.3s;
}
.cta:hover { transform: scale(1.02); }
.cta h2 { font-size: 2em; margin-bottom: 20px; }
.cta button {
  padding: 12px 30px;
  font-size: 1.2em;
  border: none;
  border-radius: 5px;
  cursor: pointer;
  margin: 10px;
  transition: transform 0.2s, background 0.3s;
}
.cta button:hover { transform: scale(1.05); }
.yes-btn { background: #27ae60; color: #fff; }
.no-btn { background: #c0392b; color: #fff; }
#ctaResponse { margin-top: 20px; font-size: 1.1em; }
#moreInfo a { font-size: 1.2em; text-decoration: underline; color: #27ae60; }

/* Footer */
footer {
  text-align: center;
  padding: 20px;
  font-size: 0.9em;
  color: #777;
}

/* Responsive Design */
@media (max-width: 768px) {
  header h1 { font-size: 2.5em; }
  header p { font-size: 1em; }
  .carousel-buttons button { padding: 8px 12px; }
}
/*************************************************************/
/* Countdown Timer */
function updateCountdown() {
  const countdownElement = document.getElementById('countdown');
  // Set Valentine's Day - February 14, 2025
  const valentineDate = new Date('February 14, 2025 00:00:00').getTime();
  const now = new Date().getTime();
  const distance = valentineDate - now;
  
  if (distance < 0) {
    countdownElement.innerHTML = "Happy Valentine's Day!";
    return;
  }
  
  const days = Math.floor(distance / (1000 * 60 * 60 * 24));
  const hours = Math.floor((distance % (1000 * 60 * 60 * 24)) / (1000 * 60 * 60));
  const minutes = Math.floor((distance % (1000 * 60 * 60)) / (1000 * 60));
  const seconds = Math.floor((distance % (1000 * 60)) / 1000);
  
  countdownElement.innerHTML = days + "d " + hours + "h " + minutes + "m " + seconds + "s ";
}
setInterval(updateCountdown, 1000);

/* Photo Carousel Functionality */
const slides = document.querySelector('.slides');
const totalSlides = document.querySelectorAll('.slides img').length;
let currentIndex = 0;

document.getElementById('nextBtn').addEventListener('click', () => {
  currentIndex = (currentIndex + 1) % totalSlides;
  updateCarousel();
});

document.getElementById('prevBtn').addEventListener('click', () => {
  currentIndex = (currentIndex - 1 + totalSlides) % totalSlides;
  updateCarousel();
});

function updateCarousel() {
  slides.style.transform = 'translateX(' + (-currentIndex * 100) + '%)';
}

// Auto-rotate carousel every 5 seconds
setInterval(() => {
  currentIndex = (currentIndex + 1) % totalSlides;
  updateCarousel();
}, 5000);

/* Hidden Poem Reveal */
document.getElementById('reveal-poem').addEventListener('click', function() {
  const poemContent = document.getElementById('poem-content');
  poemContent.style.display = (poemContent.style.display === "block") ? "none" : "block";
});
document.getElementById('reveal-extra').addEventListener('click', function() {
  const extraPoem = document.getElementById('extra-poem');
  extraPoem.style.display = (extraPoem.style.display === "block") ? "none" : "block";
});

/* Interactive Map Placeholder Click */
document.getElementById('interactive-map').addEventListener('click', function() {
  alert("Imagine an interactive map here, highlighting the places where our love story began!");
});

/* Call-to-Action Buttons */
document.getElementById('yesBtn').addEventListener('click', function() {
  document.getElementById('ctaResponse').innerHTML = "Yay! Prepare for a night filled with magic and memories.";
  // Launch polished confetti using canvas-confetti
  confetti({
    particleCount: 150,
    spread: 70,
    origin: { y: 0.6 }
  });
  // Add placeholder link for further details (to be updated later)
  document.getElementById('moreInfo').innerHTML = '<a href="#">Click here for your surprise date plan</a>';
});

document.getElementById('noBtn').addEventListener('click', function() {
  document.getElementById('ctaResponse').innerHTML = "Even if not today, my love remains eternal. Our moment will come.";
});

/* Synchronized Lyrics Display */
// Fetch the external lyrics, set them into #lyrics-display, and auto-scroll as the song plays.
fetch('assets/lyrics.txt')
  .then(response => response.text())
  .then(lyricsText => {
    const allLines = lyricsText.split(/\r?\n/).map(line => line.trim());
    // Build a nested array of words for each line
    const lyricsData = allLines.map(line => line.split(' '));
    const totalWords = lyricsData.reduce((acc, words) => acc + words.length, 0);

    bgMusic.addEventListener('timeupdate', function() {
      const currentTime = bgMusic.currentTime;
      const totalDuration = bgMusic.duration;
      let wordsToHighlight = 0;
      if (totalDuration > 0) {
        wordsToHighlight = Math.floor((currentTime / totalDuration) * totalWords);
      }
      
      // Rebuild the lyrics display
      const displayLines = [];
      let wordCount = 0;
      for (let i = 0; i < lyricsData.length; i++) {
        let lineWords = [];
        for (let j = 0; j < lyricsData[i].length; j++) {
          wordCount++;
          if (wordCount === wordsToHighlight) {
            lineWords.push('<span class="highlight">' + lyricsData[i][j] + '</span>');
          } else {
            lineWords.push(lyricsData[i][j]);
          }
        }
        displayLines.push(lineWords.join(' '));
      }
      lyricsDisplay.innerHTML = displayLines.join('\n');
    });
  })
  .catch(err => console.error('Error fetching lyrics:', err));

/* Wrap the lyric highlight logic into a function so we can call it on load. */
function highlightLyrics(lyricsData, totalWords) {
  const currentTime = bgMusic.currentTime;
  const totalDuration = bgMusic.duration;
  let wordsToHighlight = 0;
  if (totalDuration > 0) {
    wordsToHighlight = Math.floor((currentTime / totalDuration) * totalWords);
  }
  const displayLines = [];
  let wordCount = 0;
  for (let i = 0; i < lyricsData.length; i++) {
    let lineWords = [];
    for (let j = 0; j < lyricsData[i].length; j++) {
      wordCount++;
      if (wordCount === wordsToHighlight) {
        lineWords.push('<span class="highlight">' + lyricsData[i][j] + '</span>');
      } else {
        lineWords.push(lyricsData[i][j]);
      }
    }
    displayLines.push(lineWords.join(' '));
  }
  lyricsDisplay.innerHTML = displayLines.join('\n');
}

/* Fetch the external lyrics and set up auto-scroll and highlighting. */
fetch('assets/lyrics.txt')
  .then(response => response.text())
  .then(lyricsText => {
    const allLines = lyricsText.split(/\r?\n/).map(line => line.trim());
    const lyricsData = allLines.map(line => line.split(' '));
    const totalWords = lyricsData.reduce((acc, words) => acc + words.length, 0);

    bgMusic.addEventListener('loadedmetadata', function() {
      bgMusic.play().catch(err => console.error('Autoplay blocked:', err));
      highlightLyrics(lyricsData, totalWords);
    });

    bgMusic.addEventListener('timeupdate', function() {
      highlightLyrics(lyricsData, totalWords);

      /* Auto-scroll in sync with currentTime. */
      const totalDuration = bgMusic.duration;
      if (totalDuration > 0) {
        const scrollRatio = bgMusic.currentTime / totalDuration;
        lyricsDisplay.scrollTop = scrollRatio * (lyricsDisplay.scrollHeight - lyricsDisplay.clientHeight);
      }
    });
  })
  .catch(err => console.error('Error fetching lyrics:', err));

/* Smooth Scroll for Anchor Links */
document.querySelectorAll('a[href^="#"]').forEach(anchor => {
  anchor.addEventListener('click', function (e) {
      e.preventDefault();
      document.querySelector(this.getAttribute('href')).scrollIntoView({
          behavior: 'smooth'
      });
  });
});

/* Optional: Additional micro-interactions can be added here */